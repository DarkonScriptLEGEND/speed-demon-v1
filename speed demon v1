-- Services
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer

-- Sounds IDs (replace with your own if you want)
local TELEPORT_SOUND_ID = "rbxassetid://12222242"
local SPEED_SOUND_ID = "rbxassetid://31760113"

-- Variables
local teleportOn = false
local isTeleporting = false
local Character, HumanoidRootPart, Humanoid

-- Create ScreenGui
local ScreenGui = Instance.new("ScreenGui")
ScreenGui.Name = "TeleportWhenNearGui"
ScreenGui.ResetOnSpawn = false
ScreenGui.Parent = game.CoreGui

-- Toggle Button setup
local ToggleButton = Instance.new("TextButton")
ToggleButton.Size = UDim2.new(0, 200, 0, 50)
ToggleButton.Position = UDim2.new(0, 10, 0, 10)
ToggleButton.BackgroundColor3 = Color3.fromRGB(0, 0, 255) -- Blue when OFF
ToggleButton.TextColor3 = Color3.new(1, 1, 1)
ToggleButton.Font = Enum.Font.SourceSansBold
ToggleButton.TextSize = 18
ToggleButton.Text = "Teleport When Player Near: OFF"
ToggleButton.Parent = ScreenGui

-- WalkSpeed text label (bottom center)
local SpeedText = Instance.new("TextLabel")
SpeedText.Size = UDim2.new(1, 0, 0, 30)
SpeedText.Position = UDim2.new(0, 0, 1, -40)
SpeedText.BackgroundTransparency = 1
SpeedText.TextColor3 = Color3.fromRGB(0, 255, 0)
SpeedText.TextStrokeTransparency = 0.5
SpeedText.Font = Enum.Font.SourceSansBold
SpeedText.TextScaled = true
SpeedText.Text = ""
SpeedText.Parent = ScreenGui

-- Sounds (will be parented later)
local TeleportSound = Instance.new("Sound")
TeleportSound.SoundId = TELEPORT_SOUND_ID
TeleportSound.Volume = 1

local SpeedSound = Instance.new("Sound")
SpeedSound.SoundId = SPEED_SOUND_ID
SpeedSound.Volume = 1

-- Function to update character references safely
local function updateCharacterRefs()
    Character = LocalPlayer.Character
    if not Character then
        Character = LocalPlayer.CharacterAdded:Wait()
    end
    HumanoidRootPart = Character:WaitForChild("HumanoidRootPart")
    Humanoid = Character:WaitForChild("Humanoid")
    TeleportSound.Parent = HumanoidRootPart
    SpeedSound.Parent = HumanoidRootPart
end

-- Initial character refs
updateCharacterRefs()

-- Map bounds detection (5 studs inset)
local function getMapBounds()
    local minX, maxX = math.huge, -math.huge
    local minY, maxY = math.huge, -math.huge
    local minZ, maxZ = math.huge, -math.huge

    for _, part in pairs(workspace:GetDescendants()) do
        if part:IsA("BasePart") then
            local pos = part.Position
            minX = math.min(minX, pos.X - part.Size.X / 2)
            maxX = math.max(maxX, pos.X + part.Size.X / 2)
            minY = math.min(minY, pos.Y - part.Size.Y / 2)
            maxY = math.max(maxY, pos.Y + part.Size.Y / 2)
            minZ = math.min(minZ, pos.Z - part.Size.Z / 2)
            maxZ = math.max(maxZ, pos.Z + part.Size.Z / 2)
        end
    end
    return
        minX + 5, maxX - 5,
        minY + 5, maxY - 5,
        minZ + 5, maxZ - 5
end

local minX, maxX, minY, maxY, minZ, maxZ = getMapBounds()

-- Find furthest safe location within map bounds on a 75 stud circle
local function findFurthestSafeLocation()
    local currentPos = HumanoidRootPart.Position
    local furthestPos = currentPos
    local furthestDist = 0
    local radius = 75

    for angle = 0, 360, 10 do
        local rad = math.rad(angle)
        local candidatePos = currentPos + Vector3.new(math.cos(rad), 0, math.sin(rad)) * radius

        -- Clamp to map bounds
        candidatePos = Vector3.new(
            math.clamp(candidatePos.X, minX, maxX),
            math.clamp(candidatePos.Y, minY, maxY),
            math.clamp(candidatePos.Z, minZ, maxZ)
        )

        -- Raycast down to check ground
        local rayOrigin = candidatePos + Vector3.new(0, 10, 0)
        local rayDir = Vector3.new(0, -50, 0)
        local raycastResult = workspace:FindPartOnRayWithIgnoreList(Ray.new(rayOrigin, rayDir), {Character})

        if raycastResult then
            local dist = (candidatePos - currentPos).Magnitude
            if dist > furthestDist then
                furthestDist = dist
                furthestPos = candidatePos
            end
        end
    end
    return furthestPos
end

-- Teleport sequence
local function teleportLoop()
    if isTeleporting then return end
    isTeleporting = true

    for i = 1, 3 do
        local targetPos = findFurthestSafeLocation()
        HumanoidRootPart.CFrame = CFrame.new(targetPos)
        TeleportSound:Play()
        task.wait(0.3)
    end

    SpeedSound:Play()
    local originalSpeed = Humanoid.WalkSpeed
    Humanoid.WalkSpeed = 52
    SpeedText.Text = "WalkSpeed increased"

    task.delay(15, function()
        Humanoid.WalkSpeed = originalSpeed
        SpeedText.Text = ""
    end)

    isTeleporting = false
end

-- Monitor loop
task.spawn(function()
    while true do
        if teleportOn and not isTeleporting and HumanoidRootPart and Humanoid then
            for _, player in pairs(Players:GetPlayers()) do
                if player ~= LocalPlayer and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
                    local dist = (player.Character.HumanoidRootPart.Position - HumanoidRootPart.Position).Magnitude
                    if dist <= 250 then
                        teleportLoop()
                        break
                    end
                end
            end
        end
        task.wait(0.5)
    end
end)

-- Button toggle logic
ToggleButton.MouseButton1Click:Connect(function()
    teleportOn = not teleportOn
    if teleportOn then
        ToggleButton.Text = "Teleport When Player Near: ON"
        ToggleButton.BackgroundColor3 = Color3.fromRGB(255, 255, 0) -- Yellow
    else
        ToggleButton.Text = "Teleport When Player Near: OFF"
        ToggleButton.BackgroundColor3 = Color3.fromRGB(0, 0, 255) -- Blue
    end
end)

-- Update references on respawn
LocalPlayer.CharacterAdded:Connect(function()
    task.wait(0.1) -- short wait to ensure character loads
    updateCharacterRefs()
end)
